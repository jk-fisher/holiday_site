/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/script */ \"./src/scripts/script.js\");\n/* harmony import */ var _scripts_calendar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/calendar */ \"./src/scripts/calendar.js\");\n\r\n\r\n\r\n//modal function\r\nconst modal = document.getElementById(\"myModal\");\r\nconst btn = document.getElementById(\"amenities-btn\");\r\nconst close = document.getElementsByClassName(\"close\")[0];\r\n\r\nbtn.addEventListener('click', () => {\r\n  modal.style.display = \"block\";\r\n});\r\n\r\nclose.addEventListener('click', () => {\r\n  modal.style.display = \"none\";\r\n});\r\n\r\nwindow.addEventListener('click', (event) => {\r\n  if(event.target == modal) {\r\n    modal.style.display = \"none\";\r\n  }\r\n});\r\n\r\n//call navbar function\r\nburgerBar.addEventListener('click', () => {\r\n    (0,_scripts_script__WEBPACK_IMPORTED_MODULE_0__.toggle)();\r\n    // console.log('i am updated')\r\n});\r\nconst navItems = document.querySelectorAll('.nav-item');\r\nnavItems.forEach((li) => {\r\n  li.addEventListener('click', () => {\r\n    (0,_scripts_script__WEBPACK_IMPORTED_MODULE_0__.toggle)();\r\n  })\r\n})\r\n\r\n//show enquiry button on scroll\r\nwindow.addEventListener('scroll', () => {\r\n    ;(0,_scripts_script__WEBPACK_IMPORTED_MODULE_0__.showEnquiryBtn)();\r\n})\r\n// window.onscroll = showEnquiryBtn();\r\n\r\n//show more text function\r\nconst moreText = document.getElementById(\"moreBtn\");\r\nmoreText.addEventListener('click', () => {\r\n    (0,_scripts_script__WEBPACK_IMPORTED_MODULE_0__.displayText)();\r\n})\r\n\r\n//create calendar\r\nconst calendar = new _scripts_calendar__WEBPACK_IMPORTED_MODULE_1__.default();\r\ncalendar.renderCalendar();\r\n\r\n\r\ncalendar.prevMonth.addEventListener('click', () =>{\r\n    calendar.date.setMonth(calendar.date.getMonth()-1);\r\n    calendar.renderCalendar();\r\n});\r\ncalendar.nextMonth.addEventListener('click', () => {\r\n    // console.log(calendar.date);\r\n    calendar.date.setMonth(calendar.date.getMonth()+1);\r\n    // console.log(calendar.date);\r\n    calendar.renderCalendar();\r\n});\r\ncalendar.prevYear.addEventListener('click', () =>{\r\n    calendar.date.setFullYear(calendar.date.getFullYear()-1);\r\n    calendar.renderCalendar();\r\n});\r\ncalendar.nextYear.addEventListener('click', () => {\r\n    calendar.date.setFullYear(calendar.date.getFullYear()+1);\r\n    calendar.renderCalendar();\r\n});\r\n\r\n//listen for selected days\r\n//add conditional statement to check if id is before today\r\ncalendar.monthDays.addEventListener('click', e => {\r\n  if(e.target.classList.contains('day')){\r\n      const dateId = parseInt(e.target.id);\r\n      const today = document.querySelector(\".today\");\r\n      if((calendar.date.getMonth() != new Date().getMonth() ||\r\n      calendar.date.getFullYear() != new Date().getFullYear()) \r\n      ||\r\n      (dateId >= parseInt(today.id) && \r\n      calendar.date.getMonth() === new Date().getMonth() && \r\n      calendar.date.getFullYear() === new Date().getFullYear())){\r\n          calendar.selectDays(dateId);\r\n      }\r\n\r\n  }\r\n});\r\n\n\n//# sourceURL=webpack://holiday_site/./src/index.js?");

/***/ }),

/***/ "./src/scripts/calendar.js":
/*!*********************************!*\
  !*** ./src/scripts/calendar.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Calendar)\n/* harmony export */ });\nclass Calendar {\r\n    constructor() {\r\n        this.date = new Date();\r\n        this.month = [ \r\n            \"January\",\r\n            \"February\",\r\n            \"March\", \r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\"\r\n        ];\r\n        this.prevMonth = document.querySelector('.prev-month');\r\n        this.nextMonth = document.querySelector('.next-month');\r\n        this.prevYear = document.querySelector('.prev-year');\r\n        this.nextYear = document.querySelector('.next-year');\r\n        this.monthDays = document.querySelector('.days');\r\n        this.dateEnquiry = document.querySelector('.header');\r\n        this.selectedDateCounter = 0;\r\n        this.firstDateSelected = null;\r\n        this.secondDateSelected = null;\r\n        this.firstIndexSelected = null;\r\n        this.secondIndexSelected = null;\r\n        this.lastDate = null;\r\n        this.prevLastDate = null;\r\n        this.firstDayIndex = null;\r\n        this.lastDayIndex = null;\r\n        this.nextMonthDays = null;\r\n    };\r\n\r\n\r\n    selectDays(dateId) {\r\n        this.selectedDateCounter ++;\r\n        const newDateObject = this.createDateObject(dateId);\r\n        if(this.selectedDateCounter === 1 && !this.firstDateSelected){\r\n            this.firstDateSelected = newDateObject;\r\n            this.firstIndexSelected = dateId;\r\n        }else if(this.selectedDateCounter === 2 && this.firstDateSelected < newDateObject){\r\n            this.secondDateSelected = newDateObject;\r\n            this.secondIndexSelected = dateId;\r\n            this.renderUIDates();\r\n        } else {\r\n            this.firstDateSelected = newDateObject;\r\n            this.firstIndexSelected = dateId;\r\n            this.secondDateSelected = null;\r\n            this.secondIndexSelected = null;\r\n            this.selectedDateCounter = 1;\r\n            document.querySelectorAll('.day').forEach(item => {\r\n                item.classList.remove('clicked');\r\n                item.classList.remove('clicked-range');\r\n            });\r\n        }\r\n        this.highlightDays();\r\n    }\r\n\r\n    // selectMultipleMonths () {\r\n    highlightDays () {\r\n        if(this.selectedDateCounter === 1 && this.firstDateSelected >= this.createDateObject(0)){\r\n            const target = document.getElementById(this.findIndexofDay(this.firstDateSelected));\r\n            target.classList.add('clicked');\r\n        } else if (this.selectedDateCounter === 2 && this.secondDateSelected > this.createDateObject(0)) {\r\n            if(this.findIndexofDay(this.firstDateSelected) && this.findIndexofDay(this.firstDateSelected) < 0){\r\n                //update second index \r\n                this.secondIndexSelected = this.findIndexofDay(this.secondDateSelected)\r\n                const newSecondIndex = this.findIndexofDay(this.secondDateSelected);\r\n                const target = document.getElementById(this.secondIndexSelected);\r\n                target.classList.add('clicked');\r\n                //select everything from index 0 to this.findIndexOfDay(this.secondDateSelected)\r\n                for(let x = 0; x < this.secondIndexSelected; x++){\r\n                    let a = x.toString();\r\n                    let b = document.getElementById(a);\r\n                    b.classList.add('clicked-range');\r\n                }\r\n            } else if (this.findIndexofDay(this.firstDateSelected) && this.secondDateSelected > this.createDateObject(this.findLastIndex())){\r\n                //select everything from first date selected to last day showing on calendar\r\n                const target = document.getElementById(this.findIndexofDay(this.firstDateSelected));\r\n                if(target){\r\n                    target.classList.add('clicked');\r\n                    for(let x = this.findIndexofDay(this.firstDateSelected) + 1; x <= this.findLastIndex(); x++){\r\n                        let a = x.toString();\r\n                        let b = document.getElementById(a);\r\n                        b.classList.add('clicked-range');\r\n                    }\r\n                }\r\n            } else {\r\n                // both dates are on this page\r\n                let firsttarget = document.getElementById(this.findIndexofDay(this.firstDateSelected));\r\n                firsttarget.classList.add('clicked');\r\n                let secondtarget = document.getElementById(this.findIndexofDay(this.secondDateSelected));\r\n                secondtarget.classList.add('clicked');\r\n                for(let x = this.findIndexofDay(this.firstDateSelected) +1; x < this.findIndexofDay(this.secondDateSelected); x++){\r\n                    let a = x.toString();\r\n                    let b = document.getElementById(a);\r\n                    b.classList.add('clicked-range');\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    createDateObject (indexOfDay) {\r\n        let dayOfMonth = (indexOfDay + 1) - this.firstDayIndex;\r\n        let month = this.date.getMonth();\r\n        let year = this.date.getFullYear();\r\n        if(dayOfMonth > this.lastDate){\r\n            month++;\r\n            dayOfMonth = dayOfMonth - (this.lastDate); \r\n            if(month > 11){\r\n                year++\r\n                month = month - 12\r\n            };\r\n        }else if(dayOfMonth < 1){\r\n            month--;\r\n            dayOfMonth = this.prevLastDate + dayOfMonth; \r\n            if(month < 0){\r\n                year--\r\n                month = month + 12\r\n            };\r\n        };\r\n        const dateObject = new Date(year, month, dayOfMonth);\r\n        return dateObject;\r\n    };\r\n\r\n    findIndexofDay (dateObject) {\r\n        const date = dateObject.getDate();\r\n        const month = dateObject.getMonth();\r\n        if(month === this.date.getMonth()-1){\r\n            const prevLastDayIndex = this.firstDayIndex - 1;\r\n            const counterIndex = this.prevLastDate - date;\r\n            return prevLastDayIndex - counterIndex;\r\n        } else if (month === this.date.getMonth()+1){\r\n            return date + this.lastDate + (this.firstDayIndex -1);\r\n        } else if(month === this.date.getMonth()){\r\n            return date + (this.firstDayIndex -1)\r\n        };\r\n\r\n    };\r\n\r\n    findLastIndex () {\r\n        return (this.firstDayIndex - 1) + this.lastDate + this.nextMonthDays;\r\n    };\r\n    calculateNights() {\r\n        let timeDifference = this.secondDateSelected.getTime() - this.firstDateSelected.getTime();\r\n        return Math.round(timeDifference / (1000 * 3600 * 24)); \r\n    }\r\n    renderUIDates(){\r\n        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n        const discount = (this.calculateNights()*47) * 0.1;\r\n        const roundedDiscount = discount.toFixed(2);\r\n        const totalPrice = (this.calculateNights()*47) - roundedDiscount;\r\n        const roundedTotalPrice = totalPrice.toFixed(2);\r\n        const priceBreakdown = document.querySelector('.price-breakdown');\r\n        const discountDisplay = document.querySelector('.price-filler');\r\n        this.dateEnquiry.innerHTML = `<span class=\"white\">${this.firstDateSelected.toLocaleString('en-GB', options)} - <br>${this.secondDateSelected.toLocaleString('en-GB', options)}</span>`;\r\n        discountDisplay.classList.add('none');\r\n        document.querySelector(\"body > div.content-container > section.template.price > div.price-container > div.price-summary > button\").classList.remove('none');\r\n        priceBreakdown.innerHTML = `<li class=\"flex\"><span class=\"calculate-nights\">£48 x ${this.calculateNights()} nights</span><span class=\"nights-price\">£${(this.calculateNights()*47).toFixed(2)}</span></li>\r\n                                    <li class=\"flex border\"><span><b>Total:</span><span>£${roundedTotalPrice}</b></span>`;\r\n        // priceBreakdown.classList.add('padding')\r\n        if(this.calculateNights() > 6){\r\n            let li = document.createElement('li');\r\n            li.classList.add('flex')\r\n            li.innerHTML = `<span>Weekly discount -10%</span><span>-£${roundedDiscount}</span>`;\r\n            priceBreakdown.insertBefore(li, priceBreakdown.firstElementChild.nextElementSibling);\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n\r\n    renderCalendar() {\r\n        this.date.setDate(1);\r\n    \r\n    \r\n        this.lastDate = new Date(\r\n            this.date.getFullYear(),\r\n            this.date.getMonth() + 1,\r\n            0\r\n            ).getDate();\r\n        \r\n        this.prevLastDate = new Date(\r\n            this.date.getFullYear(),\r\n            this.date.getMonth(),\r\n            0\r\n            ).getDate();\r\n        \r\n        this.firstDayIndex = this.date.getDay();\r\n        \r\n        \r\n        this.lastDayIndex = new Date(\r\n            this.date.getFullYear(),\r\n            this.date.getMonth() + 1,\r\n            0\r\n            ).getDay();\r\n    \r\n        this.nextMonthDays = 7 - this.lastDayIndex - 1;\r\n    \r\n    \r\n    \r\n        document.querySelector('.month').innerHTML = this.month[this.date.getMonth()];\r\n        document.querySelector('.year').innerHTML = this.date.getFullYear();\r\n\r\n        \r\n    \r\n        document.querySelector('.selected-date').innerHTML = new Date().toDateString();\r\n    \r\n        let days = \"\";\r\n        let arrayIndex = 0;\r\n\r\n        //count down to output last month days\r\n        for(let x = this.firstDayIndex; x > 0; x--){\r\n            days += `<div class=\"prev-date day\" id=${arrayIndex}>${this.prevLastDate - x + 1}</div>`\r\n            arrayIndex++;\r\n        };\r\n    \r\n        //this month days\r\n        for(let i = 1; i <= this.lastDate; i++){\r\n            if(i === new Date().getDate() &&\r\n            this.date.getMonth() === new Date().getMonth() &&\r\n            this.date.getFullYear() === new Date().getFullYear()\r\n            ){\r\n                days += `<div class=\"today day\" id=${arrayIndex}>${i}</div>`\r\n            }else{\r\n                days += `<div class=\"day\" id=${arrayIndex}>${i}</div>`\r\n            }\r\n            arrayIndex++;\r\n        };\r\n    \r\n        //next month days\r\n        for(let j = 1; j <= this.nextMonthDays; j++){\r\n            days += `<div class=\"next-date day\" id=${arrayIndex}>${j}</div>`\r\n            arrayIndex++;\r\n        };\r\n        this.monthDays.innerHTML = days;\r\n    \r\n        // Highlighting any selected days\r\n        this.highlightDays();\r\n\r\n        //hide and show arrow icons\r\n        if(this.date.getFullYear() <= new Date().getFullYear() &&\r\n        this.date.getMonth() <= new Date().getMonth()){\r\n            this.prevYear.classList.add('none');\r\n            this.prevMonth.classList.add('none');\r\n            \r\n        } else if (this.date.getFullYear() <= new Date().getFullYear()){\r\n            this.prevYear.classList.add('none')\r\n        };\r\n    \r\n        if(this.date.getFullYear() >= new Date().getFullYear() &&\r\n        this.date.getMonth() >= new Date().getMonth()+1) {\r\n            this.prevMonth.classList.remove('none');\r\n    \r\n        };\r\n        if (this.date.getFullYear() > new Date().getFullYear()){\r\n            this.prevYear.classList.remove('none');\r\n            this.prevMonth.classList.remove('none');\r\n    \r\n        };\r\n    };\r\n    \r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://holiday_site/./src/scripts/calendar.js?");

/***/ }),

/***/ "./src/scripts/script.js":
/*!*******************************!*\
  !*** ./src/scripts/script.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toggle\": () => (/* binding */ toggle),\n/* harmony export */   \"displayText\": () => (/* binding */ displayText),\n/* harmony export */   \"showEnquiryBtn\": () => (/* binding */ showEnquiryBtn)\n/* harmony export */ });\n//responsive navbar function\r\nconst toggle = () => {\r\n  const nav = document.getElementById(\"topnav\");\r\n  const burgerBar = document.getElementById(\"navbar\");\r\n  console.log('toggle called')\r\n  nav.className === \"topnav\" ? nav.className += \" responsive\" : nav.className = \"topnav\";\r\n  if (nav.className === \"topnav\") {\r\n    burgerBar.checked = false;\r\n  } else {\r\n    burgerBar.checked = true;\r\n  }\r\n};\r\n\r\n\r\n//read more function in property description\r\nconst displayText = () => {\r\n  const dots = document.getElementById(\"dots\");\r\n  const moreText = document.getElementById(\"more\");\r\n  const btnText = document.getElementById(\"moreBtn\");\r\n  const imageCards = document.getElementById(\"imageCards\");\r\n  \r\n  if (dots.style.display === \"none\") {\r\n    dots.style.display = \"inline\";\r\n    btnText.innerHTML = \"Read more <i class='fas fa-angle-down'>\";\r\n    moreText.style.display = \"none\";\r\n    imageCards.style.marginBottom = \"0px\";\r\n  } else {\r\n    dots.style.display = \"none\";\r\n    btnText.innerHTML = \"Read less <i class='fas fa-angle-up'></i>\";\r\n    moreText.style.display = \"inline\";\r\n    imageCards.style.marginBottom = \"180px\";\r\n  }\r\n}\r\n\r\n//hide and show get availability button on scroll\r\nconst showEnquiryBtn = () => {\r\n  const enquiryBtn = document.getElementById(\"checkAvailabilityBtn\");\r\n  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\r\n    enquiryBtn.style.display = \"block\";\r\n  } else {\r\n    enquiryBtn.style.display = \"none\";\r\n  }\r\n}\r\n\r\n// window.onscroll = showEnquiryBtn();\r\n\r\n\n\n//# sourceURL=webpack://holiday_site/./src/scripts/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;